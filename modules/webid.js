// Generated by CoffeeScript 1.6.2
(function() {
  var WebID, rdfstore, request, url, raptor, util
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WebID = (typeof exports !== "undefined" && exports !== null) && exports || (this.WebID = {});

  request = require('request');

  url = require('url');

  rdfstore = require('rdfstore');

  raptor = require('raptor');

  util = require('util');

  WebID.VerificationAgent = (function() {
    function VerificationAgent(certificate) {
      this.verifyWebID = __bind(this.verifyWebID, this);
      var _this = this;
      this.uris = [];
      this.subjectAltName = certificate.subjectaltname;
      this.modulus = certificate.modulus;
      this.exponent = parseInt(certificate.exponent, 16).toString();
      this.subjectAltName.replace(/URI:([^, ]+)/g, function(match, uri) {
        return _this.uris.push(uri);
      });
    }

    VerificationAgent.prototype.verify = function(success, error, _arg) {
      var uri, _ref;

      _arg;
      if ((_ref = this.waitFor) == null) {
        this.waitFor = 0;
      }
      if (this.uris.length === 0) {
        return error('certificateProvidedSAN');
      } else {
        uri = this.uris.shift();
        return this.getWebID(uri, success, error);
      }
    };

    VerificationAgent.prototype.getWebID = function(uri, success, error) {
      var options, parsedURI, r,
        _this = this;

      parsedURI = url.parse(uri);
      options = {
        url: parsedURI,
        // url: 'http://sebastian.tramp.name',
          // url: 'http://dyndns.clelicy.de/me',
        method: 'GET',
        headers: {
          // Accept: 'application/rdf+xml, application/xhtml+xml;q=0.3, text/xml;q=0.2,application/xml;q=0.2, text/html;q=0.3, text/plain;q=0.1, text/n3,text/rdf+n3;q=0.5, application/x-turtle;q=0.2, text/turtle;q=1'
          Accept: 'application/rdf+xml; q=1'
              // , application/x-turtle; q=0.9, text/n3; q=0.8, application/rdf+xml; q=0.5, text/plain; q=0.1'
        }
      };
      return r = request(options, function(err, res, body) {
        console.log('RES', res);
        console.log('BODY', body);
        if (err) {
          console.log('error while fetching webid');
          return error('profileGet');
        } else {
          console.log('success while fetching webid');
          var parser = raptor.newParser('rdf/xml');
          var serializer = raptor.newSerializer('turtle');
          
          // serializer.serializeStart();
          var modulusUri = 'http://www.w3.org/ns/auth/cert#modulus';
          var exponentUri = 'http://www.w3.org/ns/auth/cert#exponent';
          var keyUri = '';
          var serializedProfile, exponent = null, modulus = null;
          serializer.on('data', function (data) {
            // console.log('DATA', data);
            serializedProfile += data;
          });

          serializer.on('end', function () {
            util.puts(serializedProfile);
            // return _this.verifyWebID('http://sebastian.tramp.name', serializedProfile, success, error);
          });

          parser.on('statement', function (statement) {
            //subject == source and object == target?
            console.log('STATEMENT', statement);

            if (statement.predicate.value === modulusUri) {
                // console.log('found modulus uri', statement.object.value);
                modulus = statement.object.value;
            }

            if (statement.predicate.value === exponentUri) {
                // console.log('found modulus uri', statement.object.value);
                exponent = statement.object.value;
            }
            // serializer.serializeStart();
            // serializer.serializeStatement(statement);
            // serializer.serializeEnd();
          });

          parser.on('end', function () {
             //source and target not found and no triples parsed
             // serializer.serializeEnd();
             console.log('exponent', exponent);
             console.log('modulus', modulus);
             if ((modulus != null) && (exponent != null)) {
               if ((modulus.toLowerCase() === _this.modulus.toLowerCase()) && (exponent === _this.exponent)) {
                 return success('correctWebID');
               } else {
                 return error("falseWebID");
               }
             } else {
               return error("profileAllKeysWellFormed");
             }
          });
          // console.log('WEBID', webID);
          //start parsing
          parser.parseStart(uri);
          parser.parseBuffer(new Buffer(body));
          parser.parseBuffer();

          // return _this.verifyWebID(uri, body, success, error);
        }
      });
    };

    VerificationAgent.prototype.verifyWebID = function(webID, profile, successCB, errorCB) {
      var _this = this;
      // console.log('PROFILE', profile);
              

      return rdfstore.create(function(store) {
        return store.load("rdf/xml", serializedProfile, function(success, results) {
          if (success) {
            return store.execute("PREFIX cert: <http://www.w3.org/ns/auth/cert#> SELECT ?webid ?m ?e WHERE { ?webid cert:key ?key . ?key cert:modulus ?m . ?key cert:exponent ?e . }", function(success, results) {
              var exponent, i, modulus;

              if (success) {
                modulus = null;
                exponent = null;
                i = 0;
                while (i < results.length) {
                  if (results[i].webid) {
                    modulus = results[i].m.value;
                    exponent = results[i].e.value;
                  }
                  i++;
                }
                if ((modulus != null) && (exponent != null)) {
                  if ((modulus.toLowerCase() === _this.modulus.toLowerCase()) && (exponent === _this.exponent)) {
                    return store.node(webID, function(success, graph) {
                      return successCB(graph);
                    });
                  } else {
                    return errorCB("falseWebID");
                  }
                } else {
                  return errorCB("profileAllKeysWellFormed");
                }
              } else {
                return errorCB("profileAllKeysWellFormed");
              }
            });
          } else {
            return errorCB("profileWellFormed");
          }
        });
      });
    };

    return VerificationAgent;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  var WebID, rdfstore, request, url,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  WebID = (typeof exports !== "undefined" && exports !== null) && exports || (this.WebID = {});

  request = require('request');

  url = require('url');

  rdfstore = require('rdfstore');

  WebID.VerificationAgent = (function() {
    function VerificationAgent(certificate) {
      this.verifyWebID = __bind(this.verifyWebID, this);
      var _this = this;
      this.uris = [];
      this.subjectAltName = certificate.subjectaltname;
      this.modulus = certificate.modulus;
      this.exponent = parseInt(certificate.exponent, 16).toString();
      this.subjectAltName.replace(/URI:([^, ]+)/g, function(match, uri) {
        return _this.uris.push(uri);
      });
    }

    VerificationAgent.prototype.verify = function(success, error, _arg) {
      var uri, _ref;

      _arg;
      if ((_ref = this.waitFor) == null) {
        this.waitFor = 0;
      }
      if (this.uris.length === 0) {
        return error('certificateProvidedSAN');
      } else {
        uri = this.uris.shift();
        return this.getWebID(uri, success, error);
      }
    };

    VerificationAgent.prototype.getWebID = function(uri, success, error) {
      var options, parsedURI, r,
        _this = this;

      parsedURI = url.parse(uri);
      options = {
        url: parsedURI,
        method: 'GET',
        headers: {
          Accept: 'application/rdf+xml, application/xhtml+xml;q=0.3, text/xml;q=0.2,application/xml;q=0.2, text/html;q=0.3, text/plain;q=0.1, text/n3,text/rdf+n3;q=0.5, application/x-turtle;q=0.2, text/turtle;q=1'
        }
      };
      return r = request(options, function(err, res, body) {
        if (err) {
          return error('profileGet');
        } else {
          return _this.verifyWebID(uri, body, success, error);
        }
      });
    };

    VerificationAgent.prototype.verifyWebID = function(webID, profile, successCB, errorCB) {
      var _this = this;

      return rdfstore.create(function(store) {
        return store.load("text/turtle", profile, function(success, results) {
          if (success) {
            return store.execute("PREFIX cert: <http://www.w3.org/ns/auth/cert#> SELECT ?webid ?m ?e WHERE { ?webid cert:key ?key . ?key cert:modulus ?m . ?key cert:exponent ?e . }", function(success, results) {
              var exponent, i, modulus;

              if (success) {
                modulus = null;
                exponent = null;
                i = 0;
                while (i < results.length) {
                  if (results[i].webid) {
                    modulus = results[i].m.value;
                    exponent = results[i].e.value;
                  }
                  i++;
                }
                if ((modulus != null) && (exponent != null)) {
                  if ((modulus.toLowerCase() === _this.modulus.toLowerCase()) && (exponent === _this.exponent)) {
                    return store.node(webID, function(success, graph) {
                      return successCB(graph);
                    });
                  } else {
                    return errorCB("falseWebID");
                  }
                } else {
                  return errorCB("profileAllKeysWellFormed");
                }
              } else {
                return errorCB("profileAllKeysWellFormed");
              }
            });
          } else {
            return errorCB("profileWellFormed");
          }
        });
      });
    };

    return VerificationAgent;

  })();

}).call(this);
